name: Build & Deploy to Scaleway

on:
  push:
    branches:
      - test

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
      CONTAINER_REGISTRY_ENDPOINT:  ${{secrets.CONTAINER_REGISTRY_ENDPOINT}}
      USERNAME: ${{secrets.USERNAME}}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Get Commit Hash
        id: vars
        run: echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Echo Secret
        run: echo "${{secrets.SCW_SECRET_KEY}}"

      - name: Make scripts executable
        run: chmod +x ./scripts/*.sh


      - name: Login to Scaleway Container Registry
        env:
          SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
          COMMIT_HASH: ${{ env.COMMIT_HASH }}
        run: ./scripts/docker-login.sh

      - name: Build the Docker image - Backend
        env:
          COMMIT_HASH: ${{ env.COMMIT_HASH }}
        run: ./scripts/build-backend.sh

      - name: Build the Docker image - Frontend
        env:
          COMMIT_HASH: ${{ env.COMMIT_HASH }}
        run: ./scripts/build-frontend.sh


      - name: Tag the Docker Images
        env:
          COMMIT_HASH: ${{ env.COMMIT_HASH }}
        run: ./scripts/tag.sh

      - name: Push the Docker Images
        env:
          COMMIT_HASH: ${{ env.COMMIT_HASH }}
        run: ./scripts/push-images.sh


  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@v1.0.3
        env:
          COMMIT_HASH: ${{ env.COMMIT_HASH }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          script: |
                        docker pull rg.fr-par.scw.cloud/atut-group-1/backend:latest
            docker pull rg.fr-par.scw.cloud/atut-group-1/frontend:latest
            echo "Docker images pulled successfully."
            
            if [ -d "/home/${USERNAME}/app" ]; then
              rm -rf /home/${USERNAME}/app
            fi
            mkdir -p /home/${USERNAME}/app
            echo "Directory created or recreated."
            
            cd /home/${USERNAME}/app
            git clone --branch test --single-branch https://github.com/abrahamkoloboe27/ATUT-DevOps.git
            echo "Repository cloned."
            ls
            cd ATUT_DevOps
            echo "Docker Compose directory created and accessed."
            docker compose pull
            docker compose up -d --remove-orphans
            docker system prune -f
            docker ps -a
            echo "Docker Compose up successfully."



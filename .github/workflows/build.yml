name: Build & Deploy to Scaleway

on:
  push:
    branches:
      - test

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
      CONTAINER_REGISTRY_ENDPOINT:  ${{secrets.CONTAINER_REGISTRY_ENDPOINT}}
      USERNAME: ${{secrets.USERNAME}}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Get Commit Hash
        id: vars
        run: echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Echo Secret
        run: echo "${{secrets.SCW_SECRET_KEY}}"

      - name: Make scripts executable
        run: chmod +x ./scripts/*.sh


      - name: Login to Scaleway Container Registry
        env:
          SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
          COMMIT_HASH: ${{ env.COMMIT_HASH }}
        run: ./scripts/docker-login.sh


      - name: Build the Docker images
        env:
          COMMIT_HASH: ${{ env.COMMIT_HASH }}
        run: ./scripts/build.sh


      - name: Tag the Docker Images
        env:
          COMMIT_HASH: ${{ env.COMMIT_HASH }}
        run: ./scripts/tag.sh

      - name: Push the Docker Images
        env:
          COMMIT_HASH: ${{ env.COMMIT_HASH }}
        run: ./scripts/push-images.sh


  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@v1.0.3
        env:
          COMMIT_HASH: ${{ env.COMMIT_HASH }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          script: |
            for image in $IMAGES; do
              # Récupérer le nom de l'image
              image_name=$(basename "$image")
              echo "Pulling image: $image_name ....."
              docker pull ${CONTAINER_REGISTRY_ENDPOINT}/${image_name}:latest
          
              # Pusher l'image vers le registre
              echo " $image_name pulled from registry succesfully"
            done


            APP_DIR="/home/${{ secrets.USERNAME }}/app"
            if [ -d "$APP_DIR" ]; then
              rm -rf "$APP_DIR"
              echo "Existing directory removed."
            fi
            mkdir -p "$APP_DIR"
            echo "Directory created at $APP_DIR."
            cd "$APP_DIR"
            git clone --branch test --single-branch https://github.com/abrahamkoloboe27/ATUT-DevOps.git .
            echo "Repository cloned."
            docker compose pull
            docker compose up -d --remove-orphans
            docker system prune -f
            docker ps -a
            echo "Docker Compose up successfully."
